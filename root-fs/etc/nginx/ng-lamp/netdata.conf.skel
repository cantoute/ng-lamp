# certbot certonly --webroot --webroot-path /var/www/letsencrypt -d netdata.example.com -d www.netdata.example.com

server {
  server_name netdata.example.com www.netdata.example.com;

  http2 on;
  listen 80;
  # listen [::]:80;

  root /var/www/html;

  include snippets/letsencrypt-acme-challenge.conf;
  include snippets/common-vhost.conf;

  include snippets/ban-bots.conf;

  #listen 443 ssl;

  #if ( $scheme != https ) {
  #  return 301 https://$server_name$request_uri;
  #}

  #ssl_trusted_certificate /etc/letsencrypt/live/netdata.example.com/chain.pem;
  #ssl_certificate /etc/letsencrypt/live/netdata.example.com/fullchain.pem;
  #ssl_certificate_key /etc/letsencrypt/live/netdata.example.com/privkey.pem;

  ## redirect all host aliases to first server_name
  if ( $host != $server_name ) {
    return 301 $scheme://$server_name$request_uri;
  }

  # remove the hsts header if it's present in the response
  proxy_hide_header Strict-Transport-Security;
  add_header Strict-Transport-Security
    "max-age=15768000; includeSubDomains; preload";
  add_header X-Content-Type-Options nosniff;
  add_header X-XSS-Protection "1; mode=block";

  access_log /var/log/nginx/netdata.example.com_access.log;

  location / {
    # access restrictions has to come in `location{}` not to block certbot
    #auth_basic "NetData";
    #auth_basic_user_file /etc/netdata/htpasswd;

    proxy_pass http://netdata_upstream;

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_pass_request_headers on;
    proxy_set_header Connection "";
    proxy_store off;
  }
}